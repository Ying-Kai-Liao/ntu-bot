// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  progressTracking      ProgressTracking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Course {
  id          String  @id @default(cuid())
  title       String
  description String?
  topics      Topic[]
}

model Topic {
  id               String             @id @default(cuid())
  title            String
  courseId         String
  course           Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  messages         Message[]
  ProgressTracking ProgressTracking[]
}

model Message {
  id            String   @id @default(cuid())
  role          String // "user" or "assistant"
  type          String // "text", "image", or "quiz"
  content       String
  imageUrl      String?
  options       String[]
  correctAnswer String?
  topicId       String
  topic         Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model ProgressTracking {
  id           String         @id @default(cuid())
  userId       String
  topicId      String
  status       ProgressStatus @default(NOT_STARTED)
  lastAccessed DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id])

  @@unique([userId, topicId])
}
